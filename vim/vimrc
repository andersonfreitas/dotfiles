set nocompatible                  " Must come first because it changes other options.
set noswapfile

source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim

call pathogen#infect()
call pathogen#helptags()

" Disable ununsed bundles
set runtimepath-=~/.vim/bundle/L9
set runtimepath-=~/.vim/bundle/bufexplorer
set runtimepath-=~/.vim/bundle/closetag.vim
set runtimepath-=~/.vim/bundle/conque
set runtimepath-=~/.vim/bundle/csapprox
"set runtimepath-=~/.vim/bundle/ctrlp.vim
set runtimepath-=~/.vim/bundle/headlights
set runtimepath-=~/.vim/bundle/vim-easymotion
set runtimepath-=~/.vim/bundle/vim-fuzzyfinder
set runtimepath-=~/.vim/bundle/vim-yankring
set runtimepath-=~/.vim/bundle/vimroom
set runtimepath-=~/.vim/bundle/xmledit

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set mouse=a                       " Use mouse in command line vim

set backspace=indent,eol,start    " Intuitive backspacing in insert mode.

set hidden                        " Handle multiple buffers better.

" let h and l traverse lines too
set whichwrap+=h,l

set autoread

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set autoindent

set virtualedit=block
" Useful for creating tables in Markdown
" set virtualedit+=all " or use visual

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.
"set smarttab

" Ignorable Files
set wildignore+=*.tar,*.tgz,*.gz,*.dmg,*.zip
set wildignore+=*.pdf,*/.git/*,*.log,*.lck
set wildignore+=*.pid,*.jar,*.DS_Store
" Ignore Rails folders
set wildignore+=*/log/*,*/tmp/*/*
" Ignore compiled assets
set wildignore+=*/public/assets/*
set wildignore+=*/public/javascripts/compiled/*
set wildignore+=*/public/stylesheets/compiled/*

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set cursorline                    " underline the current line

set guicursor+=n:blinkon0         " stop cursor from blinking in normal mode

" using spaces to fill the diff. Should use high contrast!
set fillchars=vert:\|,fold:·,diff:\

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

" Clearing current highlight
nmap <silent> <leader>/ :nohlsearch<CR>
"nnoremap <esc> :noh<return><esc>

set wrap                          " Turn on line wrapping.
set linebreak                     " Wrap line on words, not characters
set scroll=10                     " Scroll N line with CTRL-U and CTRL-D
set scrolloff=0                   " Show N lines of context around the cursor.

set title                         " Set the terminal's title

set history=1000

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

let g:MarkdownPreviewTMP = $HOME.'/.vim/markdown/'
let g:MarkdownPreviewAlwaysOpen=0
"autocmd BufWritePost *.md :MDP
autocmd FileType markdown setlocal tabstop=4 shiftwidth=4

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

" Increment/decrement letters with Ctrl+a / Ctrl+x
set nrformats+=alpha

set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=
set statusline +=[%n]                          " buffer number
set statusline +=[%{strlen(&fenc)?&fenc:&enc}] " file encoding
set statusline +=%y                            " file type
set statusline +=\ %<%f                        " file path (relative to current directory)
set statusline +=%m                            " modified flag
set statusline +=%=                            " right align
"set statusline +=%{fugitive#statusline()}      " current git branch
"set statusline +=%{rvm#statusline()}           " rvm info
set statusline +=%5l                           " current line
set statusline +=/%L                           " total lines
set statusline +=%4v\                          " virtual column number
set statusline +=0x%04B\                       " character under cursor

" Using the system clipboard as the default register
"set clipboard=unnamed

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby setlocal foldmethod=syntax foldlevelstart=99 nofoldenable
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2 foldlevelstart=99 nofoldenable

" XML wrapping
let g:xml_syntax_folding=1
autocmd FileType xml setlocal nowrap foldmethod=syntax foldlevel=99
"set foldtext=v:folddashes.getline(v:foldstart)

set foldtext=MyFoldText()
function! MyFoldText()
  let line = v:folddashes.getline(v:foldstart)
  if match( line, '^[ \t]*\(\/\*\|\/\/\)[*/\\]*[ \t]*$' ) == 0
    let initial = substitute( line, '^\([ \t]\)*\(\/\*\|\/\/\)\(.*\)', '\1\2', '' )
    let linenum = v:foldstart + 1
    while linenum < v:foldend
      let line = getline( linenum )
      let comment_content = substitute( line, '^\([ \t\/\*]*\)\(.*\)$', '\2', 'g' )
      if comment_content != ''
        break
      endif
      let linenum = linenum + 1
    endwhile
    let sub = initial . ' ' . comment_content
  else
    let sub = line
    let startbrace = substitute( line, '^.*{[ \t]*$', '{', 'g')
    if startbrace == '{'
      let line = getline(v:foldend)
      let endbrace = substitute( line, '^[ \t]*}\(.*\)$', '}', 'g')
      if endbrace == '}'
        let sub = sub.substitute( line, '^[ \t]*}\(.*\)$', '...}\1', 'g')
      endif
    endif
  endif
  let n = v:foldend - v:foldstart + 1
  let info = " " . n . " lines "
  let sub = sub . "                                                                                                                  "
  let num_w = getwinvar( 0, '&number' ) * getwinvar( 0, '&numberwidth' )
  let fold_w = getwinvar( 0, '&foldcolumn' )
  let sub = strpart( sub, 0, winwidth(0) - strlen( info ) - num_w - fold_w - 1 )
  return sub . info
endfunction

" Using tabs in haml files
autocmd FileType haml setlocal noexpandtab

" Opening Guardfile as a Ruby file
autocmd BufRead,BufNewFile Guardfile setlocal filetype=ruby

" Making the vim-css-color work with SCSS files
"autocmd BufRead,BufNewFile *.scss setlocal filetype=css

autocmd BufRead,BufNewFile gitconfig setlocal filetype=gitconfig

" Avoiding trailing white-space in Ruby files
autocmd BufWritePre {*.rb,*.js,*.coffee,*.scss,*.haml} :%s/\s\+$//e

" Always open a NERDTree
"autocmd VimEnter * if argc() == 0 | NERDTree | endif
"autocmd VimEnter * if argc() == 0 | wincmd p | endif

" \t to open NERDTree
map <Leader>n :NERDTreeToggle<CR>
map <Leader>N :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let NERDTreeChDirMode=2

" Command-/ to toggle comments
map <D-/> <plug>NERDCommenterToggle<CR>
imap <D-/> <Esc><plug>NERDCommenterToggle<CR>i

" Forcing myself to stop using arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" Improve up/down movement on wrapped lines
nnoremap j gj
nnoremap k gk

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Solarized Colorscheme Config
let g:solarized_diffmode="high"
colorscheme solarized

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" http://nvie.com/posts/how-i-boosted-my-vim/
"cmap w!! w !sudo tee % >/dev/null
cmap w!! %!sudo tee >/dev/null %

" Easier folding with <Space>
nnoremap <Space> za

" Autocomplete with ctrl+space
imap <C-Space> <C-p>

" Command-T configs
let g:CommandTMaxHeight=10
"let g:CommandTMatchWindowReverse=1
let g:CommandTAcceptSelectionMap = '<C-t>'
let g:CommandTAcceptSelectionTabMap = '<CR>'

"set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:○,extends:→,precedes:←
set listchars=tab:▸\ ,eol:¬,trail:·,nbsp:○,extends:❯,precedes:❮
"set showbreak=↪

syn match WhiteSpace / / conceal cchar=·
command! ConcealWhiteSpaces setlocal conceallevel=2 concealcursor=nvi
command! ShowWhiteSpaces setlocal conceallevel=0

" Automatically source vimrc as it's edited
"autocmd bufwritepost {.vimrc,vimrc} source $MYVIMRC

"autocmd FocusGained * call s:UpdateNERDTree()
"autocmd FocusGained * if match(bufname("%"), 'NERD_tree') >=0 | :echomsg "FocusGained on NERDtree" | end

" Automatically close vim if NERDtree is the last buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" NERDTree utility function
function! s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction

autocmd FocusGained * :CommandTFlush

" ConqueTerm
"let g:ConqueTerm_Color          = 1
let g:ConqueTerm_TERM           = 'xterm'
let g:ConqueTerm_Syntax         = 'conque'
let g:ConqueTerm_ReadUnfocused  = 1
let g:ConqueTerm_CWInsert       = 1

let g:EasyMotion_leader_key = '<Leader>'

nmap cp :let @" = expand("%:p")

" http://mislav.uniqpath.com/2011/12/vim-revisited/
" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

"map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
"map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

"the sequence `\d` will delete the current buffer without killing the window
nmap <leader>d :bprevious<CR>:bdelete #<CR>
"nmap <leader>d :bprevious<CR>:bdelete<CR>

" Git fugitive
nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gd :Gdiff<CR>

" Custom makeprg based on file format
autocmd FileType ruby setlocal makeprg=ruby\ %   " ruby
autocmd FileType sh   setlocal makeprg=%         " shell

" cmd+R to run the file
map <D-r> :make<CR>
imap <D-r> <esc>:make<CR>
autocmd FileType ruby map <buffer> <D-r> :w ! ruby<cr>
autocmd FileType ruby imap <buffer> <D-r> <esc>:w ! ruby<cr>

"iabbrev ddate <C-r>=strftime("%F")<CR>

" \rs to remove trailings spaces
map <leader>rs :%s/\s\+$//e<cr>

" Utility to show the highlight group under the cursor.
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Auto close XML tags
autocmd FileType xml imap <buffer> </ </<C-X><C-O>
"autocmd FileType xml imap <buffer> <tab> <esc>bdwa<<esc>pa></<esc>%i

" Close XML tags with shift+opt+. (like TextMate)
autocmd FileType xml setlocal macmeta              " in favor of the shortcut
autocmd FileType xml imap <buffer> <M-D-.> </<C-X><C-O>

autocmd FileType xml compiler xmllint

" Format and Tidy XML
autocmd FileType xml nnoremap <buffer> <F2> :silent 1,$!xmllint --encode UTF-8 --format --recover - 2>/dev/null<cr>

" Find a way to make it work with selections
"autocmd FileType xml setlocal equalprg=xmllint\ --encode\ UTF-8\ --format\ --recover\ -\ 2>/dev/null


" ============================
" Tabularize - alignment
" ============================
" Hit Cmd-Shift-A then type a character you want to align by
nmap <D-A> :Tabularize /
vmap <D-A> :Tabularize /
"AddTabularPattern hash19 /:/r0c1l0

" Convert Ruby 1.8 to 1.9 hash syntax in the current selection
autocmd FileType ruby vmap <buffer> <silent> <leader>crh :s/\%V:\([^ ]*\)\(\s*\)=>/\1:<cr>

" Apple-* Highlight all occurrences of current word (like '*' but without moving)
" http://vim.wikia.com/wiki/Highlight_all_search_pattern_matches
nnoremap <D-*> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>
" gd??

" don't move on matches
"nnoremap * *<C-O>
"nnoremap # #<C-O>

"amenu Anderson.\Sort\ File <Esc>:%!sort<cr>
" %!sort
" %!grep <something>
" %!nl
" !!date
" !!ls

nnoremap <Leader>u :GundoToggle<CR>

" Source a single line of Vimscript
nnoremap <Leader>S ^vg_y:execute @@<CR>

" Better comand-line editing
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Insert an =>
imap <c-l> <space>=><space>

" Swipe gestures to change buffers
map <SwipeLeft> :bprev<CR>
map <SwipeRight> :bnext<CR>

" When opening a file, always jump to the last cursor position
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\   exe "normal g'\"" |
\ endif

" \ww for wrapping
nmap <silent> <leader>ww :set wrap!<CR>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Show Git diff in window split when commiting
"autocmd FileType gitcommit DiffGitCached | call feedkeys("\<C-w\>w")
autocmd FileType gitcommit DiffGitCached | wincmd L | wincmd p

" Save on FocusLost
"au FocusLost * :silent! wall

" Return to normal mode on FocustLost
au FocusLost * call feedkeys("\<C-\>\<C-n>")

" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
"nnoremap <silent> * *zz
"nnoremap <silent> # #zz
"nnoremap <silent> g* g*zz
"nnoremap <silent> g# g#zz

" Mark TaskPaper tasks @done with ⌘-d
autocmd FileType taskpaper nmap <buffer> <D-d> <leader>td

" Use tab to increase/decrease indentation
autocmd FileType taskpaper inoremap <buffer> <tab> <esc>V>gv<esc>la
autocmd FileType taskpaper inoremap <buffer> <s-tab> <esc>V<gv<esc>a

" Auto close the preview window after a short time of inactivity
autocmd CursorHold * if pumvisible() == 0|pclose|endif
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif

"set diffopt=context:15

" Opening .nfo files with the right encoding
autocmd BufRead,BufNewFile *.nfo edit ++enc=cp437

" Limit the text width of text files
autocmd FileType text setlocal textwidth=78 colorcolumn=79

" Resize splits when the window is resized
au VimResized * exe 'normal! \<c-w>='

" Make <leader>' switch between ' and "
"nnoremap <leader>' ""yls<c-r>={'"': "'", "'": '"'}[@"]<cr><esc>
nmap <leader>" cs'"
nmap <leader>' cs"'

"nmap <leader>' :<c-u>execute 'normal ""ywcs' @"{'"': "'", "'": '"'}[@"]<cr>
"nmap <leader>x :execute 'normal ""ywcs' @" ')'

" Map Q to repeat the last recorded macro
map Q @@

" Faster search & replace
noremap ;; :%s:::g<Left><Left><Left>
noremap ;' :%s:::cg<Left><Left><Left><Left>
" TODO: use word under cursor as search or replace param
"noremap ;w :%s:'<cword>'::cg<Left><Left><Left>

function! s:ToggleSurroundingQuotes()
  " define 'surrounding' opening characters that we want to be able to change
  let surrounding_beginnings = ['"', "'"]
  let cursor_position = col('.')
  let line = getline('.')
  " walk the line backwards looking for the innermost 'surrounding' opening character
  while cursor_position > 0
    let char = line[cursor_position-1]
    let matched_beginning_index = index(surrounding_beginnings, char)
    if matched_beginning_index > -1
      if '"' == char
        execute 'normal cs"' . "'"
      else "if "'" == char
        execute "normal cs'" . '"'
      endif
      return
    endif
    let cursor_position -= 1
  endwhile
endfunction

command! ToggleSurroundingQuotes :call <sid>ToggleSurroundingQuotes()
noremap <script> <silent> tsq :ToggleSurroundingQuotes<CR>

function! s:ReadPwd()
  let pwd_file = $HOME . "/.vim/last-known-dir"
  if filereadable(pwd_file)
    let f = readfile(pwd_file)
    echomsg "You're now at " . f[0]
    exec "cd " . f[0]
  endif
endfunction

function! s:SavePwd()
  let pwd = [getcwd()]
  call writefile(pwd, $HOME . "/.vim/last-known-dir")
endfunction

"autocmd VimEnter * if argc() == 0 | call s:ReadPwd() | endif
autocmd WinLeave * call s:SavePwd()

" Use sane regexes
nnoremap / /\v
vnoremap / /\v

autocmd FileType markdown nmap <buffer> <leader>= yypVr=
autocmd FileType markdown nmap <buffer> <leader>- yypVr-

" Auto correct to the first word in the dictionary
nmap <leader>s 1z=]s

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

map <Leader>vi :tabe ~/.vimrc<CR>
"map <Leader>vi :vnew ~/.vimrc<CR>

map <Leader>e :e <C-R>=expand("%:p:h") . '/'<CR>

" Use _ as a word separator
"set iskeyword-=_

" Insert a Markdown table
vmap <leader>tab r\|gvholr-gvjokr <cr>

colorscheme Tomorrow-Night-Eighties
