set nocompatible                  " Must come first because it changes other options.

source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim

call pathogen#infect()
call pathogen#helptags()

" Disable ununsed bundles
set runtimepath-=~/.vim/bundle/bufexplorer
set runtimepath-=~/.vim/bundle/closetag.vim
set runtimepath-=~/.vim/bundle/ctrlp.vim
set runtimepath-=~/.vim/bundle/L9
set runtimepath-=~/.vim/bundle/vim-fuzzyfinder
set runtimepath-=~/.vim/bundle/vim-yankring
set runtimepath-=~/.vim/bundle/xmledit
set runtimepath-=~/.vim/bundle/vimroom

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set mouse=a                       " Use mouse in command line vim

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set cursorline                    " underline the current line

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

" Clearing current highlight
"nmap <silent> <leader>/ :nohlsearch<CR>
nnoremap <esc> :noh<return><esc>

set wrap                          " Turn on line wrapping.
set scroll=10                     " Scroll N line with CTRL-U and CTRL-D
set scrolloff=0                   " Show N lines of context around the cursor.

set title                         " Set the terminal's title

set history=1000

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location

let g:MarkdownPreviewTMP = $HOME.'/.vim/tmp/'

set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time

" Useful status information at bottom of screen
set statusline=
set statusline +=[%n]                              "buffer number
set statusline +=[%{strlen(&fenc)?&fenc:&enc}]     "file encoding
set statusline +=%y                                "file type
set statusline +=\ %<%f                            "file path (relative to current directory)
set statusline +=%m                                "modified flag
set statusline +=%=                                "right align
set statusline +=%{fugitive#statusline()}          "current git branch
set statusline +=%{rvm#statusline()}               "rvm info
set statusline +=%5l                               "current line
set statusline +=/%L                               "total lines
set statusline +=%4v\                              "virtual column number
set statusline +=0x%04B\                           "character under cursor

" Using the system clipboard as the default register
"set clipboard=unnamed

" Automatic fold settings for specific files. Uncomment to use.
autocmd FileType ruby setlocal foldmethod=syntax foldlevelstart=99 nofoldenable
autocmd FileType css  setlocal foldmethod=indent shiftwidth=2 tabstop=2 foldlevelstart=99 nofoldenable

" Using tabs in haml files
autocmd FileType haml setlocal noexpandtab

" Opening Guardfile as a Ruby file
autocmd BufRead,BufNewFile Guardfile set filetype=ruby

" Making the vim-css-color work with SCSS files
autocmd BufRead,BufNewFile *.scss set filetype=css

" Avoiding trailing white-space in Ruby files
autocmd BufWritePre {*.rb,*.js,*.coffee,*.scss,*.haml} :%s/\s\+$//e

" Always open a NERDTree
autocmd VimEnter * if argc() == 0 | NERDTree | endif
autocmd VimEnter * if argc() == 0 | wincmd p | endif

" \t to open NERDTree
map <Leader>n :NERDTreeToggle<CR>
map <Leader>N :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let NERDTreeChDirMode=2

" Command-/ to toggle comments
map <D-/> <plug>NERDCommenterToggle<CR>
imap <D-/> <Esc><plug>NERDCommenterToggle<CR>i

" Forcing myself to stop using arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"nnoremap j gj
"nnoremap k gk

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" coloscheme config
colorscheme railscasts

if has("gui_running")
  " Solarized Colorscheme Config
  let g:solarized_diffmode="high"
  colorscheme solarized
endif

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" http://nvie.com/posts/how-i-boosted-my-vim/
cmap w!! w !sudo tee % >/dev/null

" Easier folding with <Space>
nnoremap <Space> za

" Autocomplete with ctrl+space
imap <C-Space> <C-p>

" Command-T configs
let g:CommandTMaxHeight=10
"let g:CommandTMatchWindowReverse=1

set listchars=tab:▸\ ,eol:¬

" Automatically source vimrc as it's edited
"autocmd bufwritepost {.vimrc,vimrc} source $MYVIMRC

autocmd FocusGained * call s:UpdateNERDTree()

" Automatically close vim if NERDtree is the last buffer
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" NERDTree utility function
function s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction

" ConqueTerm
"let g:ConqueTerm_Color          = 1
let g:ConqueTerm_TERM           = 'xterm'
let g:ConqueTerm_Syntax         = 'conque'
let g:ConqueTerm_ReadUnfocused  = 1
let g:ConqueTerm_CWInsert       = 1

nmap cp :let @" = expand("%:p")

" http://mislav.uniqpath.com/2011/12/vim-revisited/
" double percentage sign in command mode is expanded
" to directory of current file - http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>

"map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
"map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

"the sequence `\d` will delete the current buffer without killing the window
nmap <leader>d :bprevious<CR>:bdelete #<CR>
"nmap <leader>d :bprevious<CR>:bdelete<CR>

" Git fugitive
nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gd :Gdiff<CR>

" Custom makeprg based on file format
autocmd FileType ruby setlocal makeprg=ruby\ %   " ruby
autocmd FileType sh   setlocal makeprg=%         " shell

" cmd+R to run the file
map <D-r> :make<CR>
imap <D-r> <esc>:make<CR>
autocmd FileType ruby map <buffer> <D-r> :w ! ruby<cr>
autocmd FileType ruby imap <buffer> <D-r> <esc>:w ! ruby<cr>

iabbrev ddate <C-r>=strftime("%F")<CR>

" \rs to remove trailings spaces
map <leader>rs :%s/\s\+$//e<cr>

" Utility to show the highlight group under the cursor.
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Auto close XML tags
autocmd FileType xml imap <buffer> </ </<C-X><C-O>
autocmd FileType xml compiler xmllint

" ============================
" Tabularize - alignment
" ============================
" Hit Cmd-Shift-A then type a character you want to align by
nmap <D-A> :Tabularize /
vmap <D-A> :Tabularize /

" centralize ruby hash :
"Tabularize /:/r0c1l0

" Convert Ruby 1.8 to 1.9 hash syntax in the current selection
vmap <silent> <leader>crh :s/\%V:\([^ ]*\)\(\s*\)=>/\1:<cr>

" Apple-* Highlight all occurrences of current word (like '*' but without moving)
" http://vim.wikia.com/wiki/Highlight_all_search_pattern_matches
nnoremap <D-*> :let @/='\<<C-R>=expand("<cword>")<CR>\>'<CR>:set hls<CR>

nnoremap <Leader>u :GundoToggle<CR> 
